package org.btkj.statistics.mybatis.provider;

import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.btkj.pojo.entity.statistics.LogExploit;
import org.rapid.data.storage.mybatis.SQLProvider;

public class LogExploitSQLProvider extends SQLProvider {
	
	public LogExploitSQLProvider() {
		super("log_exploit", "id");
	}
	
	public String exploits(Map<String, Object> params) {
		StringBuilder builder = new StringBuilder("SELECT SUM(quota) quota, `type`, `");
		builder.append(params.get("timeType")).append("` time FROM log_exploit WHERE employee_id=")
				.append(params.get("employeeId")).append(" AND (`type` & ")
				.append(params.get("typeMod")).append(") = `type` AND created BETWEEN ")
				.append(params.get("begin")).append(" AND ")
				.append(params.get("end")).append(" GROUP BY `type`, `")
				.append(params.get("timeType")).append("`");
		return builder.toString();
	}

	public String multiExploits(Map<String, Object> params) {
		List<Integer> list = (List<Integer>) params.get("list");
		StringBuilder builder = new StringBuilder();
		builder.append("SELECT SUM(quota) quota, employee_id, uid FROM log_exploit where employee_id IN (");
		for (int employeeId : list)
			builder.append(employeeId).append(",");
		builder.deleteCharAt(builder.length() - 1);
		builder.append(") AND (`type` & #{typeMod}) = `type` "
				+ "AND created BETWEEN #{begin} AND #{end} "
				+ "GROUP BY uid, employee_id ORDER BY quota DESC");
		return builder.toString();
	}
	
	public String totalExploit(Map<String, Object> params) {
		List<Integer> list = (List<Integer>) params.get("list");
		StringBuilder builder = new StringBuilder();
		builder.append("SELECT IFNULL(SUM(quota), 0) FROM log_exploit where employee_id IN (");
		for (int employeeId : list)
			builder.append(employeeId).append(",");
		builder.deleteCharAt(builder.length() - 1);
		builder.append(") AND (`type` & #{typeMod}) = `type` "
				+ "AND created BETWEEN #{begin} AND #{end}");
		return builder.toString();
	}
	
	public String batchInsert(Map<String, Object> params) {
		Collection<Object> list = (Collection<Object>) params.get(COLLECTION);
		StringBuilder builder = new StringBuilder("INSERT INTO `").append(table).append("`(`employee_id`, `uid`, `tid`, `app_id`, ")
				.append("`type`, `biz_id`, `quota`, `year`, `month`, `day`, `week`, `season`, `created`) VALUES");
		for (Object temp : list) {
			LogExploit logScore = (LogExploit) temp;
			builder.append("(").append(logScore.getEmployeeId()).append(",").append(logScore.getUid()).append(",").append(logScore.getTid())
			.append(",").append(logScore.getAppId()).append(",").append(logScore.getType()).append(",'").append(logScore.getBizId())
			.append("',").append(logScore.getQuota()).append(",").append(logScore.getYear()).append(",").append(logScore.getMonth())
			.append(",").append(logScore.getDay()).append(",").append(logScore.getWeek()).append(",").append(logScore.getSeason())
			.append(",").append(logScore.getCreated()).append("),");
		}
		builder.deleteCharAt(builder.length() - 1);
		return builder.toString();
	}
}
